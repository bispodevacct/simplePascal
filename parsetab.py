
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaAND ARRAY BEGIN BOOLEAN CHAR COLON COLONEQUAL COMMA CONST CONST_VALOR DIVIDE DO DOT ELSE END EQUAL EQUALEQUAL FALSE FOR FUNCTION GEQUAL GREAT ID IF INTEGER LB LEQUAL LESS LP MINUS MULTIPLY NOTEQUAL NUMERO OF OR PLUS PROCEDURE RB READ REAL RECORD RP SEMICOLON THEN TO TRUE TYPE VAR WHILE WRITEempty :programa : declaracoes blocobloco : BEGIN comando lista_com ENDdeclaracoes : def_const def_tipos def_var def_rotinadef_const : constante def_const\n                 | emptydef_tipos : tipo def_tipos\n                 | emptydef_var : variavel def_var\n               | emptydef_rotina : rotina def_rotina\n                  | emptyid : IDnumero : NUMEROconstante : CONST id EQUAL const_valor SEMICOLONconst_valor : CONST_VALOR\n                   | exp_consttipo : TYPE id EQUAL tipo_dado SEMICOLONvariavel : VAR campo SEMICOLONlista_id : COMMA id lista_id\n                | emptycampos : campo lista_camposcampo : id lista_id COLON tipo_dadolista_campos : SEMICOLON campo lista_campos\n                    | emptytipo_dado : INTEGER\n                 | REAL\n                 | CHAR\n                 | BOOLEAN\n                 | ARRAY LB numero RB OF tipo_dado\n                 | RECORD campos END\n                 | idrotina : FUNCTION id param_rotina COLON tipo_dado bloco_rotina\n              | PROCEDURE id param_rotina bloco_rotinaparam_rotina : LP campos RP\n                    | emptybloco_rotina : def_var blocolista_com : SEMICOLON comando lista_com\n                 | emptybloco_com : bloco\n                 | comandocomando : id nome atribuicao\n               | WHILE exp_com DO bloco_com\n               | IF exp_com THEN bloco_com else\n               | FOR for DO bloco_com\n               | WRITE const_valor\n               | READ id nomefor : id COLONEQUAL parametro TO parametroelse : ELSE bloco_com\n            | emptyatribuicao : COLONEQUAL exp\n                  | emptylista_param : parametro COMMA lista_param\n                   | parametro\n                   | emptyexp : parametro exp_l1\n           | LP parametro exp_l2exp_l1 : op_mat exp\n              | param_logico exp_logico\n              | emptyexp_logico : op_logico exp\n                  | emptyparam_logico : op_comp parametro\n                    | emptyexp_l2 : op_mat exp RP\n              | param_logico op_logico exp RPexp_const : parametro exp_const_l\n                 | LP parametro op_mat exp_const RPexp_const_l : op_mat exp_const\n                   | emptyexp_com : parametro param_logico exp_com_l\n               | LP parametro param_logico op_logico exp_com RPexp_com_l : op_logico exp_com\n                 | emptyparametro : id nome\n                 | numero\n                 | FALSE\n                 | TRUEop_logico : AND\n                 | ORop_comp : GREAT\n               | LESS\n               | EQUALEQUAL\n               | NOTEQUAL\n               | GEQUAL\n               | LEQUALop_mat : PLUS\n              | MINUS\n              | MULTIPLY\n              | DIVIDEnome : DOT id nome\n            | LB parametro RB\n            | LP lista_param RP\n            | empty'
    
_lr_action_items = {'CONST':([0,4,114,],[6,6,-15,]),'TYPE':([0,3,4,5,10,13,114,144,],[-1,12,-1,-6,12,-5,-15,-18,]),'VAR':([0,3,4,5,9,10,11,13,15,24,27,101,102,106,108,109,110,111,114,140,141,144,168,183,184,197,],[-1,-1,-1,-6,26,-1,-8,-5,-13,26,-7,-1,-19,-32,-26,-27,-28,-29,-15,-36,26,-18,-31,26,-35,-30,]),'FUNCTION':([0,3,4,5,9,10,11,13,23,24,25,27,56,60,65,102,114,144,163,185,192,],[-1,-1,-1,-6,-1,-1,-8,-5,58,-1,-10,-7,58,-9,-3,-19,-15,-18,-34,-37,-33,]),'PROCEDURE':([0,3,4,5,9,10,11,13,23,24,25,27,56,60,65,102,114,144,163,185,192,],[-1,-1,-1,-6,-1,-1,-8,-5,59,-1,-10,-7,59,-9,-3,-19,-15,-18,-34,-37,-33,]),'BEGIN':([0,2,3,4,5,9,10,11,13,15,23,24,25,27,55,56,57,60,65,75,87,88,99,101,102,106,108,109,110,111,114,140,141,144,157,163,164,168,183,184,185,192,197,],[-1,8,-1,-1,-6,-1,-1,-8,-5,-13,-1,-1,-10,-7,-4,-1,-12,-9,-3,8,8,8,-11,-1,-19,-32,-26,-27,-28,-29,-15,-36,-1,-18,8,-34,8,-31,-1,-35,-37,-33,-30,]),'$end':([1,7,65,],[0,-2,-3,]),'ID':([6,8,12,18,19,20,21,22,26,29,31,34,35,36,40,53,58,59,63,68,75,77,79,80,81,82,83,84,87,88,89,91,93,94,95,96,104,113,118,122,127,129,130,137,139,142,149,155,157,159,161,170,174,177,190,193,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-81,-82,-83,-84,-85,-86,15,15,15,15,-87,-88,-89,-90,15,15,15,15,15,-79,-80,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'WHILE':([8,31,75,87,88,157,],[18,18,18,18,18,18,]),'IF':([8,31,75,87,88,157,],[19,19,19,19,19,19,]),'FOR':([8,31,75,87,88,157,],[20,20,20,20,20,20,]),'WRITE':([8,31,75,87,88,157,],[21,21,21,21,21,21,]),'READ':([8,31,75,87,88,157,],[22,22,22,22,22,22,]),'EQUAL':([14,15,28,],[29,-13,63,]),'DOT':([15,17,41,54,70,],[-13,34,34,34,34,]),'LB':([15,17,41,54,70,112,],[-13,35,35,35,35,145,]),'LP':([15,17,18,19,21,29,41,54,68,70,91,93,94,95,96,100,101,127,129,130,137,149,155,174,177,190,],[-13,36,40,40,53,53,36,36,118,36,53,-87,-88,-89,-90,139,139,40,-79,-80,53,118,40,118,118,118,]),'COLONEQUAL':([15,17,33,37,48,70,119,120,121,],[-13,-1,68,-94,89,-1,-91,-92,-93,]),'SEMICOLON':([15,16,17,33,37,41,42,43,44,45,49,50,51,52,54,61,64,65,66,67,69,70,86,90,92,98,106,107,108,109,110,111,116,117,119,120,121,123,124,125,131,133,134,136,147,148,150,151,156,158,165,168,172,173,175,176,180,182,187,188,195,197,198,],[-13,31,-1,-1,-94,-1,-76,-77,-78,-14,-46,-16,-17,-1,-1,102,114,-3,31,-42,-52,-1,-75,-67,-70,-47,-32,144,-26,-27,-28,-29,-51,-1,-91,-92,-93,-43,-40,-41,-63,-1,-45,-69,170,-56,-1,-60,-44,-50,-23,-31,-58,-59,-62,-57,-49,-68,170,-61,-65,-30,-66,]),'END':([15,16,17,30,32,33,37,41,42,43,44,45,49,50,51,52,54,65,66,67,69,70,86,90,92,98,106,108,109,110,111,115,116,117,119,120,121,123,124,125,131,133,134,136,146,147,148,150,151,156,158,165,168,169,171,172,173,175,176,180,182,187,188,194,195,197,198,],[-13,-1,-1,65,-39,-1,-94,-1,-76,-77,-78,-14,-46,-16,-17,-1,-1,-3,-1,-42,-52,-1,-75,-67,-70,-47,-32,-26,-27,-28,-29,-38,-51,-1,-91,-92,-93,-43,-40,-41,-63,-1,-45,-69,168,-1,-56,-1,-60,-44,-50,-23,-31,-22,-25,-58,-59,-62,-57,-49,-68,-1,-61,-24,-65,-30,-66,]),'GREAT':([15,37,39,41,42,43,44,45,70,85,86,117,119,120,121,152,],[-13,-94,79,-1,-76,-77,-78,-14,-1,79,-75,79,-91,-92,-93,79,]),'LESS':([15,37,39,41,42,43,44,45,70,85,86,117,119,120,121,152,],[-13,-94,80,-1,-76,-77,-78,-14,-1,80,-75,80,-91,-92,-93,80,]),'EQUALEQUAL':([15,37,39,41,42,43,44,45,70,85,86,117,119,120,121,152,],[-13,-94,81,-1,-76,-77,-78,-14,-1,81,-75,81,-91,-92,-93,81,]),'NOTEQUAL':([15,37,39,41,42,43,44,45,70,85,86,117,119,120,121,152,],[-13,-94,82,-1,-76,-77,-78,-14,-1,82,-75,82,-91,-92,-93,82,]),'GEQUAL':([15,37,39,41,42,43,44,45,70,85,86,117,119,120,121,152,],[-13,-94,83,-1,-76,-77,-78,-14,-1,83,-75,83,-91,-92,-93,83,]),'LEQUAL':([15,37,39,41,42,43,44,45,70,85,86,117,119,120,121,152,],[-13,-94,84,-1,-76,-77,-78,-14,-1,84,-75,84,-91,-92,-93,84,]),'AND':([15,37,39,41,42,43,44,45,70,76,78,85,86,117,119,120,121,131,132,150,151,152,178,],[-13,-94,-1,-1,-76,-77,-78,-14,-1,129,-64,-1,-75,-1,-91,-92,-93,-63,129,129,-64,-1,129,]),'OR':([15,37,39,41,42,43,44,45,70,76,78,85,86,117,119,120,121,131,132,150,151,152,178,],[-13,-94,-1,-1,-76,-77,-78,-14,-1,130,-64,-1,-75,-1,-91,-92,-93,-63,130,130,-64,-1,130,]),'DO':([15,37,38,39,41,42,43,44,45,47,70,76,78,86,119,120,121,126,128,131,154,181,191,],[-13,-94,75,-1,-1,-76,-77,-78,-14,88,-1,-1,-64,-75,-91,-92,-93,-71,-74,-63,-73,-48,-72,]),'THEN':([15,37,39,41,42,43,44,45,46,70,76,78,86,119,120,121,126,128,131,154,191,],[-13,-94,-1,-1,-76,-77,-78,-14,87,-1,-1,-64,-75,-91,-92,-93,-71,-74,-63,-73,-72,]),'PLUS':([15,37,41,42,43,44,45,52,70,86,97,117,119,120,121,152,],[-13,-94,-1,-76,-77,-78,-14,93,-1,-75,93,93,-91,-92,-93,93,]),'MINUS':([15,37,41,42,43,44,45,52,70,86,97,117,119,120,121,152,],[-13,-94,-1,-76,-77,-78,-14,94,-1,-75,94,94,-91,-92,-93,94,]),'MULTIPLY':([15,37,41,42,43,44,45,52,70,86,97,117,119,120,121,152,],[-13,-94,-1,-76,-77,-78,-14,95,-1,-75,95,95,-91,-92,-93,95,]),'DIVIDE':([15,37,41,42,43,44,45,52,70,86,97,117,119,120,121,152,],[-13,-94,-1,-76,-77,-78,-14,96,-1,-75,96,96,-91,-92,-93,96,]),'ELSE':([15,17,33,37,41,42,43,44,45,49,50,51,52,54,65,67,69,70,86,90,92,98,116,117,119,120,121,123,124,125,131,133,134,136,148,150,151,156,158,172,173,175,176,180,182,188,195,198,],[-13,-1,-1,-94,-1,-76,-77,-78,-14,-46,-16,-17,-1,-1,-3,-42,-52,-1,-75,-67,-70,-47,-51,-1,-91,-92,-93,-43,-40,-41,-63,157,-45,-69,-56,-1,-60,-44,-50,-58,-59,-62,-57,-49,-68,-61,-65,-66,]),'COMMA':([15,37,41,42,43,44,45,62,70,73,86,119,120,121,143,],[-13,-94,-1,-76,-77,-78,-14,104,-1,122,-75,-91,-92,-93,104,]),'COLON':([15,62,100,103,105,138,140,143,166,184,],[-13,-1,-1,142,-21,161,-36,-1,-20,-35,]),'RB':([15,37,41,42,43,44,45,70,71,86,119,120,121,167,],[-13,-94,-1,-76,-77,-78,-14,-1,120,-75,-91,-92,-93,186,]),'RP':([15,36,37,39,41,42,43,44,45,52,70,72,73,74,76,78,86,90,92,106,108,109,110,111,117,119,120,121,122,126,128,131,136,147,148,150,151,153,154,160,162,165,168,169,171,172,173,175,176,179,182,187,188,189,191,194,195,196,197,198,],[-13,-1,-94,-1,-1,-76,-77,-78,-14,-1,-1,121,-54,-55,-1,-64,-75,-67,-70,-32,-26,-27,-28,-29,-1,-91,-92,-93,-1,-71,-74,-63,-69,-1,-56,-1,-60,-53,-73,182,184,-23,-31,-22,-25,-58,-59,-62,-57,191,-68,-1,-61,195,-72,-24,-65,198,-30,-66,]),'TO':([15,37,41,42,43,44,45,70,86,119,120,121,135,],[-13,-94,-1,-76,-77,-78,-14,-1,-75,-91,-92,-93,159,]),'FALSE':([18,19,21,29,35,36,40,53,68,77,79,80,81,82,83,84,89,91,93,94,95,96,118,122,127,129,130,137,149,155,159,174,177,190,],[43,43,43,43,43,43,43,43,43,43,-81,-82,-83,-84,-85,-86,43,43,-87,-88,-89,-90,43,43,43,-79,-80,43,43,43,43,43,43,43,]),'TRUE':([18,19,21,29,35,36,40,53,68,77,79,80,81,82,83,84,89,91,93,94,95,96,118,122,127,129,130,137,149,155,159,174,177,190,],[44,44,44,44,44,44,44,44,44,44,-81,-82,-83,-84,-85,-86,44,44,-87,-88,-89,-90,44,44,44,-79,-80,44,44,44,44,44,44,44,]),'NUMERO':([18,19,21,29,35,36,40,53,68,77,79,80,81,82,83,84,89,91,93,94,95,96,118,122,127,129,130,137,145,149,155,159,174,177,190,],[45,45,45,45,45,45,45,45,45,45,-81,-82,-83,-84,-85,-86,45,45,-87,-88,-89,-90,45,45,45,-79,-80,45,45,45,45,45,45,45,45,]),'CONST_VALOR':([21,29,],[50,50,]),'INTEGER':([63,142,161,193,],[108,108,108,108,]),'REAL':([63,142,161,193,],[109,109,109,109,]),'CHAR':([63,142,161,193,],[110,110,110,110,]),'BOOLEAN':([63,142,161,193,],[111,111,111,111,]),'ARRAY':([63,142,161,193,],[112,112,112,112,]),'RECORD':([63,142,161,193,],[113,113,113,113,]),'OF':([186,],[193,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracoes':([0,],[2,]),'def_const':([0,4,],[3,13,]),'constante':([0,4,],[4,4,]),'empty':([0,3,4,9,10,16,17,23,24,33,36,39,41,52,54,56,62,66,70,76,85,100,101,117,122,133,141,143,147,150,152,183,187,],[5,11,5,25,11,32,37,57,25,69,74,78,37,92,37,57,105,32,37,128,78,140,140,151,74,158,25,105,171,175,78,25,171,]),'bloco':([2,75,87,88,157,164,],[7,124,124,124,124,185,]),'def_tipos':([3,10,],[9,27,]),'tipo':([3,10,],[10,10,]),'id':([6,8,12,18,19,20,21,22,26,29,31,34,35,36,40,53,58,59,63,68,75,77,87,88,89,91,104,113,118,122,127,137,139,142,149,155,157,159,161,170,174,177,190,193,],[14,17,28,41,41,48,41,54,62,41,17,70,41,41,41,41,100,101,106,41,17,41,17,17,41,41,143,62,41,41,41,41,62,106,41,41,17,41,106,62,41,41,41,106,]),'comando':([8,31,75,87,88,157,],[16,66,125,125,125,125,]),'def_var':([9,24,141,183,],[23,60,164,164,]),'variavel':([9,24,141,183,],[24,24,24,24,]),'lista_com':([16,66,],[30,115,]),'nome':([17,41,54,70,],[33,86,98,119,]),'exp_com':([18,19,127,155,],[38,46,154,179,]),'parametro':([18,19,21,29,35,36,40,53,68,77,89,91,118,122,127,137,149,155,159,174,177,190,],[39,39,52,52,71,73,85,97,117,131,135,52,152,73,39,52,117,39,181,117,117,117,]),'numero':([18,19,21,29,35,36,40,53,68,77,89,91,118,122,127,137,145,149,155,159,174,177,190,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,167,42,42,42,42,42,42,]),'for':([20,],[47,]),'const_valor':([21,29,],[49,64,]),'exp_const':([21,29,91,137,],[51,51,136,160,]),'def_rotina':([23,56,],[55,99,]),'rotina':([23,56,],[56,56,]),'campo':([26,113,139,170,],[61,147,147,187,]),'atribuicao':([33,],[67,]),'lista_param':([36,122,],[72,153,]),'param_logico':([39,85,117,152,],[76,132,150,178,]),'op_comp':([39,85,117,152,],[77,77,77,77,]),'exp_const_l':([52,],[90,]),'op_mat':([52,97,117,152,],[91,137,149,177,]),'lista_id':([62,143,],[103,166,]),'tipo_dado':([63,142,161,193,],[107,165,183,197,]),'exp':([68,149,174,177,190,],[116,172,188,189,196,]),'bloco_com':([75,87,88,157,],[123,133,134,180,]),'exp_com_l':([76,],[126,]),'op_logico':([76,132,150,178,],[127,155,174,190,]),'param_rotina':([100,101,],[138,141,]),'campos':([113,139,],[146,162,]),'exp_l1':([117,],[148,]),'else':([133,],[156,]),'bloco_rotina':([141,183,],[163,192,]),'lista_campos':([147,187,],[169,194,]),'exp_logico':([150,],[173,]),'exp_l2':([152,],[176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',9),
  ('programa -> declaracoes bloco','programa',2,'p_programa','parser.py',13),
  ('bloco -> BEGIN comando lista_com END','bloco',4,'p_bloco','parser.py',18),
  ('declaracoes -> def_const def_tipos def_var def_rotina','declaracoes',4,'p_declaracoes','parser.py',23),
  ('def_const -> constante def_const','def_const',2,'p_def_const','parser.py',28),
  ('def_const -> empty','def_const',1,'p_def_const','parser.py',29),
  ('def_tipos -> tipo def_tipos','def_tipos',2,'p_def_tipos','parser.py',37),
  ('def_tipos -> empty','def_tipos',1,'p_def_tipos','parser.py',38),
  ('def_var -> variavel def_var','def_var',2,'p_def_var','parser.py',46),
  ('def_var -> empty','def_var',1,'p_def_var','parser.py',47),
  ('def_rotina -> rotina def_rotina','def_rotina',2,'p_def_rotina','parser.py',55),
  ('def_rotina -> empty','def_rotina',1,'p_def_rotina','parser.py',56),
  ('id -> ID','id',1,'p_id','parser.py',64),
  ('numero -> NUMERO','numero',1,'p_numero','parser.py',69),
  ('constante -> CONST id EQUAL const_valor SEMICOLON','constante',5,'p_constante','parser.py',74),
  ('const_valor -> CONST_VALOR','const_valor',1,'p_const_valor','parser.py',79),
  ('const_valor -> exp_const','const_valor',1,'p_const_valor','parser.py',80),
  ('tipo -> TYPE id EQUAL tipo_dado SEMICOLON','tipo',5,'p_tipo','parser.py',85),
  ('variavel -> VAR campo SEMICOLON','variavel',3,'p_variavel','parser.py',90),
  ('lista_id -> COMMA id lista_id','lista_id',3,'p_lista_id','parser.py',95),
  ('lista_id -> empty','lista_id',1,'p_lista_id','parser.py',96),
  ('campos -> campo lista_campos','campos',2,'p_campos','parser.py',104),
  ('campo -> id lista_id COLON tipo_dado','campo',4,'p_campo','parser.py',109),
  ('lista_campos -> SEMICOLON campo lista_campos','lista_campos',3,'p_lista_campos','parser.py',114),
  ('lista_campos -> empty','lista_campos',1,'p_lista_campos','parser.py',115),
  ('tipo_dado -> INTEGER','tipo_dado',1,'p_tipo_dado','parser.py',123),
  ('tipo_dado -> REAL','tipo_dado',1,'p_tipo_dado','parser.py',124),
  ('tipo_dado -> CHAR','tipo_dado',1,'p_tipo_dado','parser.py',125),
  ('tipo_dado -> BOOLEAN','tipo_dado',1,'p_tipo_dado','parser.py',126),
  ('tipo_dado -> ARRAY LB numero RB OF tipo_dado','tipo_dado',6,'p_tipo_dado','parser.py',127),
  ('tipo_dado -> RECORD campos END','tipo_dado',3,'p_tipo_dado','parser.py',128),
  ('tipo_dado -> id','tipo_dado',1,'p_tipo_dado','parser.py',129),
  ('rotina -> FUNCTION id param_rotina COLON tipo_dado bloco_rotina','rotina',6,'p_rotina','parser.py',139),
  ('rotina -> PROCEDURE id param_rotina bloco_rotina','rotina',4,'p_rotina','parser.py',140),
  ('param_rotina -> LP campos RP','param_rotina',3,'p_param_rotina','parser.py',148),
  ('param_rotina -> empty','param_rotina',1,'p_param_rotina','parser.py',149),
  ('bloco_rotina -> def_var bloco','bloco_rotina',2,'p_bloco_rotina','parser.py',157),
  ('lista_com -> SEMICOLON comando lista_com','lista_com',3,'p_lista_com','parser.py',162),
  ('lista_com -> empty','lista_com',1,'p_lista_com','parser.py',163),
  ('bloco_com -> bloco','bloco_com',1,'p_bloco_com','parser.py',171),
  ('bloco_com -> comando','bloco_com',1,'p_bloco_com','parser.py',172),
  ('comando -> id nome atribuicao','comando',3,'p_comando','parser.py',177),
  ('comando -> WHILE exp_com DO bloco_com','comando',4,'p_comando','parser.py',178),
  ('comando -> IF exp_com THEN bloco_com else','comando',5,'p_comando','parser.py',179),
  ('comando -> FOR for DO bloco_com','comando',4,'p_comando','parser.py',180),
  ('comando -> WRITE const_valor','comando',2,'p_comando','parser.py',181),
  ('comando -> READ id nome','comando',3,'p_comando','parser.py',182),
  ('for -> id COLONEQUAL parametro TO parametro','for',5,'p_for','parser.py',194),
  ('else -> ELSE bloco_com','else',2,'p_else','parser.py',199),
  ('else -> empty','else',1,'p_else','parser.py',200),
  ('atribuicao -> COLONEQUAL exp','atribuicao',2,'p_atribuicao','parser.py',208),
  ('atribuicao -> empty','atribuicao',1,'p_atribuicao','parser.py',209),
  ('lista_param -> parametro COMMA lista_param','lista_param',3,'p_lista_param','parser.py',217),
  ('lista_param -> parametro','lista_param',1,'p_lista_param','parser.py',218),
  ('lista_param -> empty','lista_param',1,'p_lista_param','parser.py',219),
  ('exp -> parametro exp_l1','exp',2,'p_exp','parser.py',227),
  ('exp -> LP parametro exp_l2','exp',3,'p_exp','parser.py',228),
  ('exp_l1 -> op_mat exp','exp_l1',2,'p_exp_l1','parser.py',236),
  ('exp_l1 -> param_logico exp_logico','exp_l1',2,'p_exp_l1','parser.py',237),
  ('exp_l1 -> empty','exp_l1',1,'p_exp_l1','parser.py',238),
  ('exp_logico -> op_logico exp','exp_logico',2,'p_exp_logico','parser.py',246),
  ('exp_logico -> empty','exp_logico',1,'p_exp_logico','parser.py',247),
  ('param_logico -> op_comp parametro','param_logico',2,'p_param_logico','parser.py',255),
  ('param_logico -> empty','param_logico',1,'p_param_logico','parser.py',256),
  ('exp_l2 -> op_mat exp RP','exp_l2',3,'p_exp_l2','parser.py',264),
  ('exp_l2 -> param_logico op_logico exp RP','exp_l2',4,'p_exp_l2','parser.py',265),
  ('exp_const -> parametro exp_const_l','exp_const',2,'p_exp_const','parser.py',273),
  ('exp_const -> LP parametro op_mat exp_const RP','exp_const',5,'p_exp_const','parser.py',274),
  ('exp_const_l -> op_mat exp_const','exp_const_l',2,'p_exp_const_l','parser.py',282),
  ('exp_const_l -> empty','exp_const_l',1,'p_exp_const_l','parser.py',283),
  ('exp_com -> parametro param_logico exp_com_l','exp_com',3,'p_exp_com','parser.py',291),
  ('exp_com -> LP parametro param_logico op_logico exp_com RP','exp_com',6,'p_exp_com','parser.py',292),
  ('exp_com_l -> op_logico exp_com','exp_com_l',2,'p_exp_com_l','parser.py',300),
  ('exp_com_l -> empty','exp_com_l',1,'p_exp_com_l','parser.py',301),
  ('parametro -> id nome','parametro',2,'p_parametro','parser.py',309),
  ('parametro -> numero','parametro',1,'p_parametro','parser.py',310),
  ('parametro -> FALSE','parametro',1,'p_parametro','parser.py',311),
  ('parametro -> TRUE','parametro',1,'p_parametro','parser.py',312),
  ('op_logico -> AND','op_logico',1,'p_op_logico','parser.py',320),
  ('op_logico -> OR','op_logico',1,'p_op_logico','parser.py',321),
  ('op_comp -> GREAT','op_comp',1,'p_op_comp','parser.py',326),
  ('op_comp -> LESS','op_comp',1,'p_op_comp','parser.py',327),
  ('op_comp -> EQUALEQUAL','op_comp',1,'p_op_comp','parser.py',328),
  ('op_comp -> NOTEQUAL','op_comp',1,'p_op_comp','parser.py',329),
  ('op_comp -> GEQUAL','op_comp',1,'p_op_comp','parser.py',330),
  ('op_comp -> LEQUAL','op_comp',1,'p_op_comp','parser.py',331),
  ('op_mat -> PLUS','op_mat',1,'p_op_mat','parser.py',336),
  ('op_mat -> MINUS','op_mat',1,'p_op_mat','parser.py',337),
  ('op_mat -> MULTIPLY','op_mat',1,'p_op_mat','parser.py',338),
  ('op_mat -> DIVIDE','op_mat',1,'p_op_mat','parser.py',339),
  ('nome -> DOT id nome','nome',3,'p_nome','parser.py',344),
  ('nome -> LB parametro RB','nome',3,'p_nome','parser.py',345),
  ('nome -> LP lista_param RP','nome',3,'p_nome','parser.py',346),
  ('nome -> empty','nome',1,'p_nome','parser.py',347),
]
